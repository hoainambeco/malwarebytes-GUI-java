package gui.DAO;

import gui.ConnectDB;
import gui.Interface.ProxiesInterface;
import gui.entities.Proxies;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;

public class ProxiesDAO implements ProxiesInterface {
    private final Connection conn = ConnectDB.connection;
    private final ArrayList<Proxies> proxies;

    public ProxiesDAO() {
        this.proxies = new ArrayList<Proxies>();
    }

    @Override
    public void addProxies(Proxies key) {
        this.proxies.add(key);
    }

    @Override
    public boolean updateProxies(Proxies key) {
        try {
            PreparedStatement   ps = conn.prepareStatement("UPDATE proxies SET host = ?, port = ?, username = ?, password = ?, proxy_type = ?::proxies_proxy_type_enum, status = ?::proxies_status_enum, mb_status = ?::proxies_mb_status_enum WHERE id = ?");
            ps.setString(1, key.getHost());
            ps.setInt(2, key.getPort());
            ps.setString(3, key.getUsername());
            ps.setString(4, key.getPassword());
            ps.setString(5, key.getType());
            ps.setString(6, key.getStatus());
            ps.setString(7, key.getMbStatus());
            ps.setString(8, key.getId());
            ps.executeUpdate();
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false;
        }
    }

    @Override
    public void deleteProxies(String id) {

    }

    @Override
    public Proxies getProxiesById(String id) {
        return null;
    }

    @Override
    public Proxies getProxiesByIpPort(String ip, int port, String type) {
        Proxies proxy = null;
        try {
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM proxies WHERE host = ? AND port = ? AND proxy_type = ?::proxies_proxy_type_enum");
            ps.setString(1, ip);
            ps.setInt(2, port);
            ps.setString(3, type);

            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                Date createdAt = rs.getDate("created_at");
                Date updatedAt = rs.getDate("updated_at");
                String id = rs.getString("id");
                String proxyHost = rs.getString("host");
                int proxyPort = rs.getInt("port");
                String typeProxy = rs.getString("proxy_type");
                String proxyUser = rs.getString("username");
                String proxyPass = rs.getString("password");
                String status = rs.getString("status");
                String mbStatus = rs.getString("mb_status");

                proxy = new Proxies(createdAt, updatedAt, id, proxyHost, proxyPort, proxyUser, proxyPass, typeProxy, status, mbStatus);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        return proxy;
    }

    @Override
    public ArrayList<Proxies> getProxiesByType(String type) {
        return null;
    }

    @Override
    public ArrayList<Proxies> getAllProxies() {
        return this.proxies;
    }
}
