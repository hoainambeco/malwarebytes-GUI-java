package gui.DAO;

import gui.ConnectDB;
import gui.Interface.MalwarebytesInterface;
import gui.entities.MalwarebytesKey;
import gui.entities.Proxies;

import javax.swing.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Objects;

public class MalwarebytesDAO implements MalwarebytesInterface {
    private final Connection conn = ConnectDB.connection;
    private final ArrayList<MalwarebytesKey> malwarebytesKeys;

    public MalwarebytesDAO() {
        this.malwarebytesKeys = new ArrayList<MalwarebytesKey>();
        ;
    }

    @Override
    public void addKey(MalwarebytesKey key) {
        this.malwarebytesKeys.add(key);
    }

    @Override
    public void updateKey(MalwarebytesKey key) {

    }

    @Override
    public void deleteKey(String id) {

    }

    @Override
    public MalwarebytesKey getKeyById(String id) {
        MalwarebytesKey key = null;
        try {
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM malwarebytes_key WHERE id = ?");
            ps.setString(1, id);
            ResultSet rs = ps.executeQuery();
            if (rs.next()) {
                System.out.println(rs.getString("status"));
                String keyId = rs.getString("id");
                String keyValue = rs.getString("key");
                String status = rs.getString("status");
                String data = rs.getString("data");
                boolean recheck = rs.getBoolean("recheck");
                Date redeemAt = null;
                if (rs.getTimestamp("redeemed_at") != null)
                    redeemAt = new Date(rs.getTimestamp("redeemed_at").getTime());
                Date registeredAt = null;
                if (rs.getTimestamp("registered_at") != null)
                    registeredAt = new Date(rs.getTimestamp("registered_at").getTime());
                Date createdAt = new Date(rs.getTimestamp("created_at").getTime());
                Date updatedAt = new Date(rs.getTimestamp("updated_at").getTime());
                Objects redeem = (Objects) rs.getObject("redeem");

                key = new MalwarebytesKey(createdAt, updatedAt, keyId, keyValue, status, data, recheck, redeem, redeemAt, registeredAt);
            }
            rs.close();
            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
        return key;
    }

    @Override
    public ArrayList<MalwarebytesKey> getAllKeys() {
        return this.malwarebytesKeys;
    }

    @Override
    public ArrayList<MalwarebytesKey> getKeysByStatus(String status) {
        ArrayList<MalwarebytesKey> keys = new ArrayList<>();
        try {
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM malwarebytes_key WHERE status = ?");
            ps.setString(1, status);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String keyId = rs.getString("id");
                String keyValue = rs.getString("key");
                String statusValue = rs.getString("status");
                String data = rs.getString("data");
                boolean recheck = rs.getBoolean("recheck");
                Date redeemAt = null;
                if (rs.getTimestamp("redeemed_at") != null)
                    redeemAt = new Date(rs.getTimestamp("redeemed_at").getTime());
                Date registeredAt = null;
                if (rs.getTimestamp("registered_at") != null)
                    registeredAt = new Date(rs.getTimestamp("registered_at").getTime());
                Date createdAt = new Date(rs.getTimestamp("created_at").getTime());
                Date updatedAt = new Date(rs.getTimestamp("updated_at").getTime());
                Objects redeem = (Objects) rs.getObject("redeem");

                MalwarebytesKey mbKey = new MalwarebytesKey(createdAt, updatedAt, keyId, keyValue, statusValue, data, recheck, redeem, redeemAt, registeredAt);
                keys.add(mbKey);
            }
            rs.close();
            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
        return keys;
    }

    @Override
    public ArrayList<MalwarebytesKey> getKeysByKey(String key) {
        ArrayList<MalwarebytesKey> keys = new ArrayList<>();
        try {
            PreparedStatement ps = conn.prepareStatement("SELECT * FROM malwarebytes_key WHERE key = ?");
            ps.setString(1, key);
            ResultSet rs = ps.executeQuery();
            while (rs.next()) {
                String keyId = rs.getString("id");
                String keyValue = rs.getString("key");
                String status = rs.getString("status");
                String data = rs.getString("data");
                boolean recheck = rs.getBoolean("recheck");
                Date redeemAt = null;
                if (rs.getTimestamp("redeemed_at") != null)
                    redeemAt = new Date(rs.getTimestamp("redeemed_at").getTime());
                Date registeredAt = null;
                if (rs.getTimestamp("registered_at") != null)
                    registeredAt = new Date(rs.getTimestamp("registered_at").getTime());
                Date createdAt = new Date(rs.getTimestamp("created_at").getTime());
                Date updatedAt = new Date(rs.getTimestamp("updated_at").getTime());
                Objects redeem = (Objects) rs.getObject("redeem");
                MalwarebytesKey mbKey = new MalwarebytesKey(createdAt, updatedAt, keyId, keyValue, status, data, recheck, redeem, redeemAt, registeredAt);
                keys.add(mbKey);
            }
            rs.close();
            ps.close();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
        return keys;
    }

}
