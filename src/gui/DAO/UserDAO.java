package gui.DAO;

import gui.ConnectDB;
import gui.Interface.UserInterface;
import gui.entities.User;

import javax.swing.*;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Date;

public class UserDAO implements UserInterface {
    @Override
    public void addUser(User user) {
        try {
            Statement statement = ConnectDB.connection.createStatement();
            String sql = "INSERT INTO users (username, email, password, status) VALUES ('" + user.getUsername() + "', '" + user.getEmail() + "', '" + user.getPassword() + "', '" + user.getStatus() + "')";
            statement.executeUpdate(sql);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    @Override
    public void updateUser(User key) {
        try {
            PreparedStatement preparedStatement = ConnectDB.connection.prepareStatement("UPDATE users SET username = ?, email = ?, password = ?, status = ? WHERE id = ?");
            preparedStatement.setString(1, key.getUsername());
            preparedStatement.setString(2, key.getEmail());
            preparedStatement.setString(3, key.getPassword());
            preparedStatement.setString(4, key.getStatus());
            preparedStatement.setInt(5, key.getId());
            preparedStatement.executeUpdate();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
        }
    }

    @Override
    public User getUserById(int userId) {
        try {
            Statement statement = ConnectDB.connection.createStatement();
            ResultSet  resultSet = statement.executeQuery( "SELECT * FROM users WHERE id = '" + userId + "'" + " LIMIT 1");
            if (!resultSet.next()) {
                return null;
            }
            Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
            Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
            int id = resultSet.getInt("id");
            String email = resultSet.getString("email");
            String password = resultSet.getString("password");
            String status = resultSet.getString("status");
            String username = resultSet.getString("username");
            return new User(createdAt, updatedAt, id, username, email, password, status);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            return null;
        }    }

    @Override
    public User getUserByUsername(String string) {
        try {
            Statement statement = ConnectDB.connection.createStatement();
            ResultSet  resultSet = statement.executeQuery( "SELECT * FROM users WHERE username = '" + string + "'" + " LIMIT 1");
            if (!resultSet.next()) {
                return null;
            }
            Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
            Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
            int id = resultSet.getInt("id");
            String email = resultSet.getString("email");
            String password = resultSet.getString("password");
            String status = resultSet.getString("status");
            String username = resultSet.getString("username");
            return new User(createdAt, updatedAt, id, username, email, password, status);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, e.getMessage());
            return null;
        }
    }

    @Override
    public User getUserByEmail(String string) {
        try {
            Statement statement = ConnectDB.connection.createStatement();
            ResultSet  resultSet = statement.executeQuery( "SELECT * FROM users WHERE email = '" + string + "'" + " LIMIT 1");
            if (!resultSet.next()) {
                return null;
            }
            Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
            Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
            int id = resultSet.getInt("id");
            String email = resultSet.getString("email");
            String password = resultSet.getString("password");
            String status = resultSet.getString("status");
            String username = resultSet.getString("username");
            return new User( createdAt, updatedAt, id, username, email, password, status);
        } catch (Exception e) {
            return null;
        }
    }

    @Override
    public ArrayList<User> getAllUsers() {
        return null;
    }
}
