package gui;

import gui.DAO.ProxiesDAO;
import gui.Interface.ProxiesInterface;
import gui.entities.Proxies;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

public class Proxy extends JFrame {

  private static final JFrame proxyFrame = new JFrame();
  private final ProxiesInterface IProxies = new ProxiesDAO();
  private JPanel proxy;
  private JTable tbl_ListProxies;
  private JScrollPane scrollPane1;
  private JTextField txtLimit;
  private JButton btnSearch;
  private JButton btnCancel;
  private JComboBox cbbProxyType;
  private JButton btnPreviousPage;
  private JButton btnNextPage;
  private JLabel tlbPage;
  private int currentPage = 1;
  private int recordsPerPage = 100;

  public Proxy() {
    btnSearch.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentPage = 1;
        tlbPage.setText("Page " + currentPage);

        String sql = "SELECT * FROM proxies ";
        String proxyType = cbbProxyType.getSelectedItem().toString();
        int limt = 1000;
        try {
          limt =
              !txtLimit.getText().isEmpty() ? Integer.parseInt(txtLimit.getText()) : recordsPerPage;
        } catch (NumberFormatException ex) {
          JOptionPane.showMessageDialog(null, "Please enter a valid number.");
        }
        DefaultTableModel model = new DefaultTableModel(
            new String[]{"STT", "IP", "Port", "Username", "Password", "Type"}, 0);
        tbl_ListProxies.setModel(model);
        if (!proxyType.isEmpty()) {
          sql += "WHERE proxy_type = '" + proxyType + "'";
        }
        try {
          Statement statement = ConnectDB.connection.createStatement();
          ResultSet resultSet = statement.executeQuery(sql + " LIMIT " + limt);
          int i = 1;
          while (resultSet.next()) {
            String ip = resultSet.getString("host");
            int port = resultSet.getInt("port");
            String username = resultSet.getString("username");
            String password = resultSet.getString("password");
            String type = resultSet.getString("proxy_type");
            model.addRow(new Object[]{i, ip, port, username, password, type});
            i++;
          }
          btnNextPage.setEnabled(i >= recordsPerPage);
          btnPreviousPage.setEnabled(currentPage > 1);
          resultSet.close();
          statement.close();
        } catch (SQLException ex) {
          JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
      }
    });

    btnNextPage.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentPage++;
        refreshTable();
      }
    });
    btnPreviousPage.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        if (currentPage > 1) {
          currentPage--;
          refreshTable();
        }
      }
    });
  }

  private void refreshTable() {
    recordsPerPage =
        txtLimit.getText().isEmpty() ? recordsPerPage : Integer.parseInt(txtLimit.getText());
    String sql = "SELECT * FROM proxies ";
    String proxyType = cbbProxyType.getSelectedItem().toString();
    if (!proxyType.isEmpty()) {
      sql += "WHERE proxy_type = '" + proxyType + "'";
    }
    sql += " LIMIT " + recordsPerPage + " OFFSET " + (currentPage - 1) * recordsPerPage;

    DefaultTableModel model = new DefaultTableModel(
        new String[]{"STT", "IP", "Port", "Username", "Password", "Type"}, 0);
    tbl_ListProxies.setModel(model);

    try {
      Statement statement = ConnectDB.connection.createStatement();
      ResultSet resultSet = statement.executeQuery(sql);
      int i = 1;
      while (resultSet.next()) {
        Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
        Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
        String id = resultSet.getString("id");
        String ip = resultSet.getString("host");
        int port = resultSet.getInt("port");
        String username = resultSet.getString("username");
        String password = resultSet.getString("password");
        String type = resultSet.getString("proxy_type");
        String status = resultSet.getString("status");
        String mbStatus = resultSet.getString("mb_status");
        IProxies.addProxies(
            new Proxies(createdAt, updatedAt, id, ip, port, username, password, type, status,
                mbStatus));
        model.addRow(new Object[]{i, ip, port, username, password, type});
        i++;
      }
      tlbPage.setText("Page " + currentPage);
      btnNextPage.setEnabled(i >= recordsPerPage);
      btnPreviousPage.setEnabled(currentPage > 1);
      resultSet.close();
      statement.close();
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
    }
  }

  public void main(String[] args) {
    SwingUtilities.invokeLater(new Runnable() {
      @Override
      public void run() {
        Proxy homeInstance = new Proxy();
        proxyFrame.setTitle("Proxy Manager");
        proxyFrame.setSize(600, 400);
        proxyFrame.setContentPane(homeInstance.proxy);
        proxyFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        proxyFrame.setVisible(true);
        proxyFrame.setLocationRelativeTo(null);
        homeInstance.createTypeComboBox();
        homeInstance.refreshTable();
        txtLimit.setText(String.valueOf(recordsPerPage));
      }
    });
  }

  private void createTypeComboBox() {
    cbbProxyType.setModel(
        new DefaultComboBoxModel(new String[]{"http", "https", "socket4", "socket4a", "socket5"}));
  }
}