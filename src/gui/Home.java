package gui;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Optional;

public class Home extends JFrame {

    private static final JFrame homeFrame = new JFrame();
    private JPanel home;
    private JTable tbl_ListProxies;
    private JScrollPane scrollPane1;
    private JTextField txtLimit;
    private JButton btnSearch;
    private JButton btnCancel;
    private JComboBox cbbProxyType;

    public Home() {
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                String sql = "SELECT * FROM proxies ";
                String proxyType = cbbProxyType.getSelectedItem().toString();
                int limt = 1000;
                try {
                    limt = !txtLimit.getText().isEmpty() ? Integer.parseInt(txtLimit.getText()) : 1000;
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(null, "Please enter a valid number.");
                }
                DefaultTableModel model = new DefaultTableModel(new String[]{"STT","IP", "Port", "Username", "Password", "Type"}, 0);
                tbl_ListProxies.setModel(model);
                if (!proxyType.isEmpty()){
                    sql += "WHERE proxy_type = '" + proxyType + "'";
                }
                try {
                    Statement statement = ConnectDB.connection.createStatement();
                    ResultSet resultSet = statement.executeQuery(sql + " LIMIT " + limt );
                    int i = 1;
                    while (resultSet.next()) {
                        String ip = resultSet.getString("host");
                        int port = resultSet.getInt("port");
                        String username = resultSet.getString("username");
                        String password = resultSet.getString("password");
                        String type = resultSet.getString("proxy_type");
                        model.addRow(new Object[]{i,ip, port, username, password, type});
                        i++;
                    }
                    resultSet.close();
                    statement.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
                }
            }
        });
    }

    public void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                Home homeInstance = new Home();
                homeFrame.setTitle("Home");
                homeFrame.setSize(600, 400);
                homeFrame.setResizable(false);
                homeFrame.setContentPane(homeInstance.home);
                homeFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
                homeFrame.setVisible(true);
                homeFrame.setLocationRelativeTo(null);
                DefaultTableModel model = new DefaultTableModel(new String[]{"STT","IP", "Port", "Username", "Password", "Type"}, 0);
                try {
                    Statement statement = ConnectDB.connection.createStatement();
                    ResultSet resultSet = statement.executeQuery("SELECT * FROM proxies" + " LIMIT " + 1000 );
                    int i = 1;
                    while (resultSet.next()) {
                        String ip = resultSet.getString("host");
                        int port = resultSet.getInt("port");
                        String username = resultSet.getString("username");
                        String password = resultSet.getString("password");
                        String type = resultSet.getString("proxy_type");
                        model.addRow(new Object[]{i,ip, port, username, password, type});
                        i++;
                    }
                    resultSet.close();
                    statement.close();
                } catch (SQLException ex) {
                    ex.printStackTrace();
                    JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
                }
                homeInstance.createUIComponents(model);
                homeInstance.createTypeComboBox();
            }
        });
    }

    private void createUIComponents(DefaultTableModel model) {
        this.tbl_ListProxies.setModel(model);
    }

    private void createTypeComboBox() {
        cbbProxyType.setModel(new DefaultComboBoxModel(new String[]{"http", "https", "socket4", "socket4a","socket5"}));
    }
}