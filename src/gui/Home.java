package gui;

import gui.DAO.MalwarebytesDAO;
import gui.DAO.ProxiesDAO;
import gui.Interface.MalwarebytesInterface;
import gui.Interface.ProxiesInterface;
import gui.entities.MalwarebytesKey;
import gui.entities.Proxies;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;
import java.awt.*;
import java.awt.event.*;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;

public class Home extends JFrame {

    private final ProxiesInterface IProxies = new ProxiesDAO();
    private final MalwarebytesInterface IMalwarebytes = new MalwarebytesDAO();

    private JTabbedPane tabbedPane1;
    private JPanel panel1;
    private JPanel proxy;
    private JScrollPane scrollPane1;
    private JTable tbl_ListProxies;
    private JComboBox<String> cbbProxyType;
    private JTextField txtLimit;
    private JButton btnSearch;
    private JButton btnCancel;
    private JButton btnPreviousPage;
    private JButton btnNextPage;
    private JLabel tlbPage;
    private JTable tbl_ListMb;
    private JButton btnMbPreviousPage;
    private JButton btnMbNextPage;
    private JLabel txtMbPage;
    private JTextField txtMbLimit;
    private JComboBox<String> cbbStatus;
    private JTextField txtKey;
    private JComboBox<String> cbbRecheck;
    private JButton btnMbSearch;

    private static int currentPage = 1;
    private static int recordsPerPage = 100;
    private static int currentMbPage = 1;
    private static int recordsMbPerPage = 100;

    public Home() {
        this.cbbProxyType.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentPage = 1;
                refreshTable();
            }
        });

        this.cbbStatus.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentMbPage = 1;
                refreshDataMalwareBytes();
            }
        });
        this.cbbRecheck.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentMbPage = 1;
                refreshDataMalwareBytes();
            }
        });
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentPage = 1;
                tlbPage.setText("Page " + currentPage);
                refreshTable();
            }
        });

        btnNextPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentPage++;
                refreshTable();
            }
        });
        btnPreviousPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentPage > 1) {
                    currentPage--;
                    refreshTable();
                }
            }
        });

        btnMbNextPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentMbPage++;
                refreshDataMalwareBytes();
            }
        });
        btnMbPreviousPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentMbPage > 1) {
                    currentMbPage--;
                    refreshDataMalwareBytes();
                }
            }
        });
        btnMbSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentMbPage = 1;
                txtMbPage.setText("Page " + currentMbPage);
                refreshDataMalwareBytes();
            }
        });
        txtLimit.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    currentPage = 1;
                    tlbPage.setText("Page " + currentPage);
                    refreshTable();
                }
                super.keyPressed(e);
            }
        });
        txtMbLimit.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    currentMbPage = 1;
                    txtMbPage.setText("Page " + currentPage);
                    refreshDataMalwareBytes();
                }
                super.keyPressed(e);
            }
        });

        txtKey.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    currentMbPage = 1;
                    txtMbPage.setText("Page " + currentPage);
                    refreshDataMalwareBytes();
                }
                super.keyPressed(e);
            }
        });
        tbl_ListMb.addComponentListener(new ComponentAdapter() {
            @Override
            public void componentResized(ComponentEvent e) {
                super.componentResized(e);
                refreshDataMalwareBytes();
            }
        });
        txtLimit.addKeyListener(new KeyAdapter() {
        });
        txtLimit.addFocusListener(new FocusAdapter() {
        });
    }

    private void refreshTable() {
        if (txtLimit == null || cbbProxyType == null) {
            System.out.println("txtLimit or cbbProxyType is not initialized");
            return;
        }
        recordsPerPage = txtLimit.getText().isEmpty() ? recordsPerPage : Integer.parseInt(txtLimit.getText());
        String sql = "SELECT * FROM proxies WHERE proxy_type = ?::proxies_proxy_type_enum LIMIT ? OFFSET ?";
        String proxyType = Objects.requireNonNull(cbbProxyType.getSelectedItem()).toString();
        DefaultTableModel model = new DefaultTableModel(new String[]{"STT", "IP", "Port", "Username", "Password", "Type"}, 0);
        tbl_ListProxies.setModel(model);

        try {
            PreparedStatement statement = ConnectDB.connection.prepareStatement(sql);
            statement.setString(1, proxyType);
            statement.setInt(2, recordsPerPage);
            statement.setInt(3, (currentPage - 1) * recordsPerPage);
            ResultSet resultSet = statement.executeQuery();
            int i = 1;
            while (resultSet.next()) {
                Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
                Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
                String id = resultSet.getString("id");
                String ip = resultSet.getString("host");
                int port = resultSet.getInt("port");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");
                String type = resultSet.getString("proxy_type");
                String status = resultSet.getString("status");
                String mbStatus = resultSet.getString("mb_status");
                IProxies.addProxies(new Proxies(createdAt, updatedAt, id, ip, port, username, password, type, status, mbStatus));
                model.addRow(new Object[]{i, ip, port, username, password, type});
                i++;
            }
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(tbl_ListProxies.getModel());
            tbl_ListProxies.setRowSorter(sorter);
            txtLimit.setText(String.valueOf(recordsPerPage));
            tlbPage.setText("Page " + currentPage);
            btnNextPage.setEnabled(i >= recordsPerPage);
            btnPreviousPage.setEnabled(currentPage > 1);
            resultSet.close();
            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
    }

    private void refreshDataMalwareBytes() {
        if (txtMbLimit == null || cbbProxyType == null) {
            System.out.println("txtMbLimit or cbbProxyType is not initialized");
            return;
        }
        recordsMbPerPage = txtMbLimit.getText().isEmpty() ? recordsMbPerPage : Integer.parseInt(txtMbLimit.getText());
        String sql = "SELECT * FROM malwarebytes_key WHERE key LIKE ? AND status = ?::malwarebytes_key_status_enum and recheck = ?::boolean LIMIT ? OFFSET ?";
        String[] columns = new String[]{"STT", "Key", "Status", "Recheck", "Updated at"};
        if (tbl_ListMb.getWidth() >= 1800) {
            columns = new String[]{"STT", "Key", "Status", "Recheck", "Data", "Updated at", "Redeemed at", "Registered at"};
        }
        DefaultTableModel model = new DefaultTableModel(columns, 0);
        tbl_ListMb.setModel(model);
        try {
            PreparedStatement statement = ConnectDB.connection.prepareStatement(sql);
            statement.setString(1, "%" + txtKey.getText() + "%");
            statement.setString(2, Objects.requireNonNull(cbbStatus.getSelectedItem()).toString());
            statement.setString(3, Objects.requireNonNull(cbbRecheck.getSelectedItem()).toString());
            statement.setInt(4, recordsMbPerPage);
            statement.setInt(5, (currentMbPage - 1) * recordsMbPerPage);
            ResultSet resultSet = statement.executeQuery();
            int i = 1;
            while (resultSet.next()) {
                Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
                Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
                String id = resultSet.getString("id");
                String key = resultSet.getString("key");
                String data = resultSet.getString("data");
                String status = resultSet.getString("status");
                boolean recheck = resultSet.getBoolean("recheck");
                String redeem = resultSet.getString("redeem");
                Date redeemed_at = resultSet.getDate("redeemed_at");
                Date registered_at = resultSet.getDate("registered_at");

                SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss dd-MM-yyyy");
                String formattedDate = formatter.format(updatedAt);

                IMalwarebytes.addKey(new MalwarebytesKey(createdAt, updatedAt, id, key, status, data, recheck, redeem, redeemed_at, registered_at));
                if (tbl_ListMb.getWidth() >= 1800) {
                    model.addRow(new Object[]{i, key, status, recheck, data, formattedDate, redeemed_at, registered_at});
                } else {
                    model.addRow(new Object[]{i, key, status, recheck, formattedDate});
                }
                i++;
            }
            TableRowSorter<TableModel> sorter = new TableRowSorter<>(tbl_ListMb.getModel());
            tbl_ListMb.setRowSorter(sorter);
            tbl_ListMb.getColumnModel().getColumn(0).setMaxWidth(60);
            tbl_ListMb.getColumnModel().getColumn(1).setMinWidth(200);
            tbl_ListMb.getColumnModel().getColumn(2).setMinWidth(60);
            tbl_ListMb.getColumnModel().getColumn(2).setMaxWidth(60);
            tbl_ListMb.getColumnModel().getColumn(3).setMinWidth(60);
            tbl_ListMb.getColumnModel().getColumn(3).setMaxWidth(60);
            txtMbLimit.setText(String.valueOf(recordsMbPerPage));
            txtMbPage.setText("Page " + currentMbPage);
            btnMbNextPage.setEnabled(i >= recordsMbPerPage);
            btnMbPreviousPage.setEnabled(currentMbPage > 1);
            resultSet.close();
            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
    }

    private void createTypeComboBox() {
        try {
            Statement statement = ConnectDB.connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT DISTINCT proxy_type FROM proxies");
            while (resultSet.next()) {
                this.cbbProxyType.addItem(resultSet.getString("proxy_type"));
            }
            resultSet.close();
            statement.close();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
    }

    public static void main(int usernameId) {
        Home homeInstance = new Home();
        JFrame frame = new JFrame("Home");
        frame.setContentPane(homeInstance.panel1);  // Use homeInstance.panel1 here
        frame.setMinimumSize(new Dimension(600, 600));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
        homeInstance.createTypeComboBox();
        homeInstance.refreshDataMalwareBytes();
    }
}
