package gui;

import gui.DAO.MalwarebytesDAO;
import gui.DAO.ProxiesDAO;
import gui.DAO.UserDAO;
import gui.Interface.MalwarebytesInterface;
import gui.Interface.ProxiesInterface;
import gui.Interface.UserInterface;
import gui.entities.MalwarebytesKey;
import gui.entities.Proxies;
import gui.entities.User;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.StringSelection;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.FocusAdapter;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPasswordField;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

public class Home extends JFrame {

  private static final JFrame frame = new JFrame("Home");
  private static JPopupMenu popupMenu = new JPopupMenu();
  private static int currentPage = 1;
  private static int recordsPerPage = 100;
  private static int currentMbPage = 1;
  private static int recordsMbPerPage = 100;
  private static int usernameId;
  private final ProxiesInterface IProxies = new ProxiesDAO();
  private final MalwarebytesInterface IMalwareBytes = new MalwarebytesDAO();
  private final UserInterface IUser = new UserDAO();
  private JTabbedPane tabbedPane1;
  private JPanel panel1;
  private JPanel proxy;
  private JScrollPane scrollPane1;
  private JTable tbl_ListProxies;
  private JComboBox<String> cbbProxyType;
  private JTextField txtLimit;
  private JButton btnSearch;
  private JButton btnCancel;
  private JButton btnPreviousPage;
  private JButton btnNextPage;
  private JLabel tlbPage;
  private JTable tbl_ListMb;
  private JButton btnMbPreviousPage;
  private JButton btnMbNextPage;
  private JLabel txtMbPage;
  private JTextField txtMbLimit;
  private JComboBox<String> cbbStatus;
  private JTextField txtKey;
  private JComboBox<String> cbbRecheck;
  private JButton btnMbSearch;
  private JLabel lblId;
  private JButton btnLogout;
  private JButton btnUpdate;
  private JButton btnClear;
  private JPanel profile;
  private JPanel malwarebytes;
  private JLabel lblUsername;
  private JLabel lblEmail;
  private JLabel lblStatus;
  private JTextField txtUsername;
  private JTextField txtEmail;
  private JPasswordField txtOldPass;
  private JPasswordField txtNewPass;
  private JPasswordField txtRenewPass;

  public Home() {
    popupMenu = new JPopupMenu();
    popupMenu.add(menuItemCopy());
    popupMenu.add(menuItemDelete());
    popupMenu.add(menuItemRefresh());

    this.cbbProxyType.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentPage = 1;
        refreshTable();
      }
    });
    this.cbbStatus.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentMbPage = 1;
        refreshDataMalwareBytes();
      }
    });
    this.cbbRecheck.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentMbPage = 1;
        refreshDataMalwareBytes();
      }
    });
    btnSearch.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentPage = 1;
        tlbPage.setText("Page " + currentPage);
        refreshTable();
      }
    });
    btnNextPage.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentPage++;
        refreshTable();
      }
    });
    btnPreviousPage.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        if (currentPage > 1) {
          currentPage--;
          refreshTable();
        }
      }
    });
    btnMbNextPage.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentMbPage++;
        refreshDataMalwareBytes();
      }
    });
    btnMbPreviousPage.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        if (currentMbPage > 1) {
          currentMbPage--;
          refreshDataMalwareBytes();
        }
      }
    });
    btnMbSearch.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        currentMbPage = 1;
        txtMbPage.setText("Page " + currentMbPage);
        refreshDataMalwareBytes();
      }
    });
    txtLimit.addKeyListener(new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
          currentPage = 1;
          tlbPage.setText("Page " + currentPage);
          refreshTable();
        }
        super.keyPressed(e);
      }
    });
    txtMbLimit.addKeyListener(new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
          currentMbPage = 1;
          txtMbPage.setText("Page " + currentPage);
          refreshDataMalwareBytes();
        }
        super.keyPressed(e);
      }
    });

    txtKey.addKeyListener(new KeyAdapter() {
      @Override
      public void keyPressed(KeyEvent e) {
        if (e.getKeyCode() == KeyEvent.VK_ENTER) {
          currentMbPage = 1;
          txtMbPage.setText("Page " + currentPage);
          refreshDataMalwareBytes();
        }
        super.keyPressed(e);
      }
    });
    tbl_ListMb.addComponentListener(new ComponentAdapter() {
      @Override
      public void componentResized(ComponentEvent e) {
        super.componentResized(e);
        refreshDataMalwareBytes();
      }
    });
    tbl_ListMb.addMouseListener(new MouseAdapter() {
      public void mouseReleased(MouseEvent e) {
        if (e.isPopupTrigger()) {
          popupMenu.show(e.getComponent(), e.getX(), e.getY());
        }
      }
    });
    txtLimit.addKeyListener(new KeyAdapter() {
    });
    txtLimit.addFocusListener(new FocusAdapter() {
    });
    profile.addComponentListener(new ComponentAdapter() {
      @Override
      public void componentShown(ComponentEvent e) {
        super.componentShown(e);
        initDataProfile();
      }
    });
    malwarebytes.addComponentListener(new ComponentAdapter() {
      @Override
      public void componentShown(ComponentEvent e) {
        super.componentShown(e);
        refreshDataMalwareBytes();
      }
    });
    proxy.addComponentListener(new ComponentAdapter() {
      @Override
      public void componentShown(ComponentEvent e) {
        super.componentShown(e);
        createTypeComboBox();
      }
    });
    btnLogout.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        frame.dispose();
        Login.loginMain();
      }
    });
    btnClear.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        User user = IUser.getUserById(usernameId);
        lblId.setText(String.valueOf(user.getId()));
        lblUsername.setText(user.getUsername());
        lblEmail.setText(user.getEmail());
        lblStatus.setText(
            Objects.equals(user.getStatus(), "ACTIVE") ? "Đang hoạt động" : "Đã bị khóa");

        txtUsername.setText(user.getUsername());
        txtEmail.setText(user.getEmail());
        txtNewPass.setText("");
        txtOldPass.setText("");
        txtRenewPass.setText("");
      }
    });
    btnUpdate.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        User user = IUser.getUserById(usernameId);

        String username = txtUsername.getText();
        String email = txtEmail.getText();
        if (username.isEmpty() || email.isEmpty()) {
          JOptionPane.showMessageDialog(null, "Vui lòng điền đầy đủ thông tin.");
          return;
        }
        if (!user.getUsername().equals(username) && IUser.getUserByUsername(username) != null) {
          JOptionPane.showMessageDialog(null, "Tên đăng nhập đã tồn tại.");
          return;
        }
        if (!user.getEmail().equals(email) && IUser.getUserByEmail(email) != null) {
          JOptionPane.showMessageDialog(null, "Email đã tồn tại.");
          return;
        }
        String oldPass = new String(txtOldPass.getPassword());
        String newPass = new String(txtNewPass.getPassword());
        String renewPass = new String(txtRenewPass.getPassword());
        if (!oldPass.isEmpty() || !newPass.isEmpty() || !renewPass.isEmpty()) {
          if (!oldPass.equals(user.getPassword())) {
            JOptionPane.showMessageDialog(null, "Mật khẩu cũ không đúng.");
            return;
          }
          if (!newPass.equals(renewPass)) {
            JOptionPane.showMessageDialog(null, "Mật khẩu mới không khớp.");
            return;
          }
          if (oldPass.equals(newPass)) {
            JOptionPane.showMessageDialog(null, "Mật khẩu mới không được trùng với mật khẩu cũ.");
            return;
          }
          user.setPassword(newPass);
        }
        user.setUsername(username);
        user.setEmail(email);
        if (IUser.updateUser(user)) {
          JOptionPane.showMessageDialog(null, "Cập nhật thông tin thành công.");
        } else {
          JOptionPane.showMessageDialog(null, "Cập nhật thông tin thất bại.");
        }
        initDataProfile();
      }
    });

    tbl_ListProxies.addMouseListener(new MouseAdapter() {
      @Override
      public void mouseClicked(MouseEvent e) {
        if (e.getClickCount() == 2) {     // Double-click detected
          int selectedRow = tbl_ListProxies.getSelectedRow();
          if (selectedRow != -1) {
            String currentIp = tbl_ListProxies.getValueAt(selectedRow, 1).toString();
            String currentPort = tbl_ListProxies.getValueAt(selectedRow, 2).toString();
            Object valueCurrentUser = tbl_ListProxies.getValueAt(selectedRow, 3);
            String currentUser = (valueCurrentUser != null) ? valueCurrentUser.toString() : "";
            Object valueCurrentPass = tbl_ListProxies.getValueAt(selectedRow, 3);
            String currentPass = (valueCurrentPass != null) ? valueCurrentPass.toString() : "";
            String currentType = tbl_ListProxies.getValueAt(selectedRow, 5).toString();
            String inputIp = JOptionPane.showInputDialog(frame, "Enter new IP", currentIp);
            String newIp = (inputIp != null) ? inputIp : currentIp;
            String inputPort = JOptionPane.showInputDialog(frame, "Enter new port", currentPort);
            String newPort = (inputPort != null) ? inputPort : currentPort;
            String inputUser = JOptionPane.showInputDialog(frame, "Enter new username",
                currentUser);
            String newUser = (inputUser != null) ? inputUser : currentUser;
            String inputPass = JOptionPane.showInputDialog(frame, "Enter new password",
                currentPass);
            String newPass = (inputPass != null) ? inputPass : currentPass;
            String inputType = JOptionPane.showInputDialog(frame, "Enter new type", currentType);
            String newType = (inputType != null) ? inputType : currentType;
            if (newIp != null && !Objects.equals(newIp, currentIp)
                || newPort != null && !Objects.equals(newPort, currentPort)
                || newUser != null && !Objects.equals(newUser, currentUser)
                || newPass != null && !Objects.equals(newPass, currentPass)
                || newType != null && !Objects.equals(newType, currentType)) {
              tbl_ListProxies.setValueAt(newIp, selectedRow, 1);
              tbl_ListProxies.setValueAt(newPort, selectedRow, 2);
              tbl_ListProxies.setValueAt(newUser, selectedRow, 3);
              tbl_ListProxies.setValueAt(newPass, selectedRow, 4);
              tbl_ListProxies.setValueAt(newType, selectedRow, 5);
              Proxies proxies = IProxies.getProxiesByIpPort(currentIp,
                  Integer.parseInt(currentPort), currentType);
              proxies.setHost(newIp);
              proxies.setPort(Integer.parseInt(newPort));
              proxies.setUsername(newUser);
              proxies.setPassword(newPass);
              proxies.setType(newType);
              IProxies.updateProxies(proxies);
            }
          }
        }
      }
    });
  }

  public static void main(int usernameId) {
    Home homeInstance = new Home();
    frame.setContentPane(homeInstance.panel1);  // Use homeInstance.panel1 here
    frame.setMinimumSize(new Dimension(600, 600));
    frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    frame.pack();
    frame.setVisible(true);
    frame.setLocationRelativeTo(null);
    homeInstance.createTypeComboBox();
    Home.usernameId = usernameId;
  }

  private JMenuItem menuItemCopy() {
    JMenuItem menuItem = new JMenuItem("Copy");
    menuItem.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        int row = tbl_ListMb.getSelectedRow();
        int column = tbl_ListMb.getSelectedColumn();
        if (row >= 0 && row < tbl_ListMb.getRowCount() && column >= 0
            && column < tbl_ListMb.getColumnCount()) {
          String value = tbl_ListMb.getValueAt(row, column).toString();
          StringSelection stringSelection = new StringSelection(value);
          Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
          clipboard.setContents(stringSelection, null);
        }
      }
    });
    return menuItem;
  }

  private JMenuItem menuItemDelete() {
    JMenuItem menuItem = new JMenuItem("Delete");
    menuItem.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        int row = tbl_ListMb.getSelectedRow();
        int column = tbl_ListMb.getSelectedColumn();
        if (row >= 0 && row < tbl_ListMb.getRowCount() && column >= 0
            && column < tbl_ListMb.getColumnCount()) {
          String key = tbl_ListMb.getValueAt(row, 1).toString();
          IMalwareBytes.deleteKey(key);
          refreshDataMalwareBytes();
        }
      }
    });
    return menuItem;
  }

  private JMenuItem menuItemRefresh() {
    JMenuItem menuItem = new JMenuItem("Refresh");
    menuItem.addActionListener(new ActionListener() {
      @Override
      public void actionPerformed(ActionEvent e) {
        refreshDataMalwareBytes();
      }
    });
    return menuItem;
  }

  private void refreshTable() {
    if (txtLimit == null || cbbProxyType == null) {
      System.out.println("txtLimit or cbbProxyType is not initialized");
      return;
    }
    recordsPerPage =
        txtLimit.getText().isEmpty() ? recordsPerPage : Integer.parseInt(txtLimit.getText());
    String sql = "SELECT * FROM proxies WHERE proxy_type = ?::proxies_proxy_type_enum LIMIT ? OFFSET ?";
    String proxyType = Objects.requireNonNull(cbbProxyType.getSelectedItem()).toString();
    DefaultTableModel model = new DefaultTableModel(
        new String[]{"STT", "IP", "Port", "Username", "Password", "Type"}, 0) {
      @Override
      public boolean isCellEditable(int row, int column) {
        return false;
      }
    };
    tbl_ListProxies.setModel(model);

    try {
      PreparedStatement statement = ConnectDB.connection.prepareStatement(sql);
      statement.setString(1, proxyType);
      statement.setInt(2, recordsPerPage);
      statement.setInt(3, (currentPage - 1) * recordsPerPage);
      ResultSet resultSet = statement.executeQuery();
      int i = 1;
      while (resultSet.next()) {
        Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
        Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
        String id = resultSet.getString("id");
        String ip = resultSet.getString("host");
        int port = resultSet.getInt("port");
        String username = resultSet.getString("username");
        String password = resultSet.getString("password");
        String type = resultSet.getString("proxy_type");
        String status = resultSet.getString("status");
        String mbStatus = resultSet.getString("mb_status");
        IProxies.addProxies(
            new Proxies(createdAt, updatedAt, id, ip, port, username, password, type, status,
                mbStatus));
        model.addRow(new Object[]{i, ip, port, username, password, type});
        i++;
      }
      TableRowSorter<TableModel> sorter = new TableRowSorter<>(tbl_ListProxies.getModel());
      tbl_ListProxies.setRowSorter(sorter);
      txtLimit.setText(String.valueOf(recordsPerPage));
      tlbPage.setText("Page " + currentPage);
      btnNextPage.setEnabled(i >= recordsPerPage);
      btnPreviousPage.setEnabled(currentPage > 1);
      resultSet.close();
      statement.close();
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
    }
  }

  private void refreshDataMalwareBytes() {
    SimpleDateFormat formatter = new SimpleDateFormat("HH:mm:ss dd-MM-yyyy");

    if (txtMbLimit == null || cbbProxyType == null) {
      System.out.println("txtMbLimit or cbbProxyType is not initialized");
      return;
    }
    recordsMbPerPage =
        txtMbLimit.getText().isEmpty() ? recordsMbPerPage : Integer.parseInt(txtMbLimit.getText());
    String sql = "SELECT * FROM malwarebytes_key WHERE key LIKE ? AND status = ?::malwarebytes_key_status_enum and recheck = ?::boolean LIMIT ? OFFSET ?";
    String[] columns = new String[]{"STT", "Key", "Status", "Recheck", "Updated at"};
    if (tbl_ListMb.getWidth() >= 1800) {
      columns = new String[]{"STT", "Key", "Status", "Recheck", "Updated at", "Data", "Redeemed at",
          "Registered at"};
    }
    DefaultTableModel model = new DefaultTableModel(columns, 0);
    tbl_ListMb.setModel(model);
    try {
      PreparedStatement statement = ConnectDB.connection.prepareStatement(sql);
      statement.setString(1, "%" + txtKey.getText() + "%");
      statement.setString(2, Objects.requireNonNull(cbbStatus.getSelectedItem()).toString());
      statement.setString(3, Objects.requireNonNull(cbbRecheck.getSelectedItem()).toString());
      statement.setInt(4, recordsMbPerPage);
      statement.setInt(5, (currentMbPage - 1) * recordsMbPerPage);
      ResultSet resultSet = statement.executeQuery();
      int i = 1;
      while (resultSet.next()) {
        Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
        Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
        String id = resultSet.getString("id");
        String key = resultSet.getString("key");
        String data = resultSet.getString("data");
        String status = resultSet.getString("status");
        boolean recheck = resultSet.getBoolean("recheck");
        String redeem = resultSet.getString("redeem");
        Date redeemed_at = resultSet.getDate("redeemed_at");
        Date registered_at = resultSet.getDate("registered_at");

        String formattedDate = formatter.format(updatedAt);
        String redeemedAt = (redeemed_at != null) ? formatter.format(redeemed_at) : "";
        String registeredAt = (registered_at != null) ? formatter.format(registered_at) : "";
        IMalwareBytes.addKey(
            new MalwarebytesKey(createdAt, updatedAt, id, key, status, data, recheck, redeem,
                redeemed_at, registered_at));
        try {
          if (tbl_ListMb.getWidth() >= 1800) {
            model.addRow(new Object[]{i, key, status, recheck, formattedDate, data, redeemedAt,
                registeredAt});
          } else {
            model.addRow(new Object[]{i, key, status, recheck, formattedDate});
          }
        } catch (Exception e) {
          System.out.println(e);
        }
        i++;
      }
      tbl_ListMb.setComponentPopupMenu(popupMenu);
      TableRowSorter<TableModel> sorter = new TableRowSorter<>(tbl_ListMb.getModel());
      tbl_ListMb.setRowSorter(sorter);
      tbl_ListMb.getColumnModel().getColumn(0).setMaxWidth(60);
      tbl_ListMb.getColumnModel().getColumn(1).setMinWidth(200);
      tbl_ListMb.getColumnModel().getColumn(2).setMinWidth(60);
      tbl_ListMb.getColumnModel().getColumn(2).setMaxWidth(60);
      tbl_ListMb.getColumnModel().getColumn(3).setMinWidth(60);
      tbl_ListMb.getColumnModel().getColumn(3).setMaxWidth(60);
      txtMbLimit.setText(String.valueOf(recordsMbPerPage));
      txtMbPage.setText("Page " + currentMbPage);
      btnMbNextPage.setEnabled(i >= recordsMbPerPage);
      btnMbPreviousPage.setEnabled(currentMbPage > 1);

      tbl_ListMb.getModel().addTableModelListener(new TableModelListener() {
        @Override
        public void tableChanged(TableModelEvent e) {
          System.out.println(
              "Row: " + e.getFirstRow() + " Column: " + e.getColumn() + " Event: " + e.getType());
          if (e.getType() == TableModelEvent.UPDATE) {
            int row = e.getFirstRow();
            int column = e.getColumn();
            TableModel model = (TableModel) e.getSource();
            String columnName = model.getColumnName(column);
            String key = model.getValueAt(row, 1).toString();
            MalwarebytesKey malwarebytesKey = IMalwareBytes.getKeyByKey(key);
            switch (columnName) {
              case "Status":
                String status = model.getValueAt(row, column).toString();
                malwarebytesKey.setStatus(status);
                break;
              case "Recheck":
                boolean recheck = model.getValueAt(row, column) == "true";
                malwarebytesKey.setRecheck(recheck);
                break;
              case "Data":
                String data = model.getValueAt(row, column).toString();
                malwarebytesKey.setData(data);
                break;
              case "Redeemed at":
                String inputRedeemedAt = (String) model.getValueAt(row, column);
                System.out.println(inputRedeemedAt);
                if (inputRedeemedAt != null && !inputRedeemedAt.isEmpty()) {
                  try {
                    Date redeemedAt = formatter.parse(inputRedeemedAt);
                    malwarebytesKey.setRedeemAt(redeemedAt);
                  } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null,
                        "Failed to parse date. Redeemed at format: HH:mm:ss dd-MM-yyyy");
                    model.setValueAt(malwarebytesKey.getRedeemAt(), row, column);
                  }
                } else {
                  malwarebytesKey.setRedeemAt(null);
                }
                break;
              case "Registered at":
                String inputRegisteredAt = (String) model.getValueAt(row, column);
                if (inputRegisteredAt != null && !inputRegisteredAt.isEmpty()) {
                  try {
                    Date registeredAt = formatter.parse(inputRegisteredAt);
                    malwarebytesKey.setRegisteredAt(registeredAt);
                  } catch (ParseException ex) {
                    JOptionPane.showMessageDialog(null,
                        "Failed to parse date. Registered at format: HH:mm:ss dd-MM-yyyy");
                    model.setValueAt(malwarebytesKey.getRegisteredAt(), row, column);
                  }
                } else {
                  malwarebytesKey.setRegisteredAt(null);
                }
                break;
            }
            IMalwareBytes.updateKey(malwarebytesKey);
          }
        }
      });
      resultSet.close();
      statement.close();
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
    }
  }

  private void createTypeComboBox() {
    try {
      Statement statement = ConnectDB.connection.createStatement();
      ResultSet resultSet = statement.executeQuery("SELECT DISTINCT proxy_type FROM proxies");
      while (resultSet.next()) {
        this.cbbProxyType.addItem(resultSet.getString("proxy_type"));
      }
      resultSet.close();
      statement.close();
    } catch (SQLException ex) {
      JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
    }
  }

  private void initDataProfile() {
    User user = IUser.getUserById(usernameId);
    lblId.setText(String.valueOf(user.getId()));
    lblUsername.setText(user.getUsername());
    lblEmail.setText(user.getEmail());
    lblStatus.setText(Objects.equals(user.getStatus(), "ACTIVE") ? "Đang hoạt động" : "Đã bị khóa");
    txtUsername.setText(user.getUsername());
    txtEmail.setText(user.getEmail());
  }
}
