package gui;

import gui.DAO.ProxiesDAO;
import gui.Interface.ProxiesInterface;
import gui.entities.Proxies;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.*;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Date;

public class Home extends JFrame {

    private final ProxiesInterface IProxies = new ProxiesDAO();

    private JTabbedPane tabbedPane1;
    private JPanel panel1;
    private JPanel proxy;
    private JScrollPane scrollPane1;
    private JTable tbl_ListProxies;
    private JComboBox<String> cbbProxyType;
    private JTextField txtLimit;
    private JButton btnSearch;
    private JButton btnCancel;
    private JButton btnPreviousPage;
    private JButton btnNextPage;
    private JLabel tlbPage;
    private JButton button1;

    private static int currentPage = 1;
    private static int recordsPerPage = 100;

    public Home() {
        this.cbbProxyType.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentPage = 1;
                refreshTable();
            }
        });
        btnSearch.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentPage = 1;
                tlbPage.setText("Page " + currentPage);
                refreshTable();
            }
        });

        btnNextPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                currentPage++;
                refreshTable();
            }
        });
        btnPreviousPage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (currentPage > 1) {
                    currentPage--;
                    refreshTable();
                }
            }
        });
        txtLimit.addKeyListener(new KeyAdapter() {
            @Override
            public void keyPressed(KeyEvent e) {
                if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                    currentPage = 1;
                    tlbPage.setText("Page " + currentPage);
                    refreshTable();
                }
                super.keyPressed(e);
            }
        });
    }

    private void refreshTable() {
        if (txtLimit == null || cbbProxyType == null) {
            System.out.println("txtLimit or cbbProxyType is not initialized");
            return;
        }
        recordsPerPage = txtLimit.getText().isEmpty() ? recordsPerPage : Integer.parseInt(txtLimit.getText());
        String sql = "SELECT * FROM proxies ";
        String proxyType = cbbProxyType.getSelectedItem().toString();
        if (!proxyType.isEmpty()) {
            sql += "WHERE proxy_type = '" + proxyType + "'";
        }
        sql += " LIMIT " + recordsPerPage + " OFFSET " + (currentPage - 1) * recordsPerPage;

        DefaultTableModel model = new DefaultTableModel(new String[]{"STT", "IP", "Port", "Username", "Password", "Type"}, 0);
        tbl_ListProxies.setModel(model);

        try {
            Statement statement = ConnectDB.connection.createStatement();
            ResultSet resultSet = statement.executeQuery(sql);
            int i = 1;
            while (resultSet.next()) {
                Date createdAt = new Date(resultSet.getTimestamp("created_at").getTime());
                Date updatedAt = new Date(resultSet.getTimestamp("updated_at").getTime());
                String id = resultSet.getString("id");
                String ip = resultSet.getString("host");
                int port = resultSet.getInt("port");
                String username = resultSet.getString("username");
                String password = resultSet.getString("password");
                String type = resultSet.getString("proxy_type");
                String status = resultSet.getString("status");
                String mbStatus = resultSet.getString("mb_status");
                IProxies.addProxies(new Proxies(createdAt, updatedAt, id, ip, port, username, password, type, status, mbStatus));
                model.addRow(new Object[]{i, ip, port, username, password, type});
                i++;
            }
            txtLimit.setText(String.valueOf(recordsPerPage));
            tlbPage.setText("Page " + currentPage);
            btnNextPage.setEnabled(i >= recordsPerPage);
            btnPreviousPage.setEnabled(currentPage > 1);
            resultSet.close();
            statement.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
    }

    private void createTypeComboBox() {
        try {
            Statement statement = ConnectDB.connection.createStatement();
            ResultSet resultSet = statement.executeQuery("SELECT DISTINCT proxy_type FROM proxies");
            while (resultSet.next()) {
                this.cbbProxyType.addItem(resultSet.getString("proxy_type"));
            }
            resultSet.close();
            statement.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Failed to retrieve data.");
        }
    }

    public static void main(int usernameId) {
        Home homeInstance = new Home();
        JFrame frame = new JFrame("Home");
        frame.setContentPane(homeInstance.panel1);  // Use homeInstance.panel1 here
        frame.setMinimumSize(new Dimension(600, 400));
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        frame.setLocationRelativeTo(null);
        homeInstance.createTypeComboBox();
        homeInstance.refreshTable();
    }
}
